# bot/main.py
import os
import sys
import logging
import asyncio
from typing import Dict, List

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä LLM
from bot.services.llm_client import ask as llm_ask

# -------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -------------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
logger = logging.getLogger(__name__)

# -------------------------
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# -------------------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
HF_API_KEY = os.getenv("HF_API_KEY")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
HF_MODEL = os.getenv("HF_MODEL", "bigscience/bloomz-1b1")
SYSTEM_PROMPT = os.getenv("SYSTEM_PROMPT", (
    "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π, –≤–µ–∂–ª–∏–≤—ã–π –∏ –∫—Ä–∞—Ç–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å Telegram-–±–æ—Ç–æ–º. "
    "–û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏, –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã, –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥."
))

if not TELEGRAM_TOKEN:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
    sys.exit(1)

# -------------------------
# Telegram bot / dispatcher
# -------------------------
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# In-memory —Ä–µ–∂–∏–º –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM
awaiting_llm: Dict[int, bool] = {}

# Reply keyboard
keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"), KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
)

# –•–µ–Ω–¥–ª–µ—Ä –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏)
@dp.message()
async def all_messages_handler(message: types.Message):
    user_id = message.from_user.id
    text = (message.text or "").strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ LLM ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    if awaiting_llm.get(user_id, False):
        if text.lower() == "/menu":
            awaiting_llm.pop(user_id, None)
            await message.answer("–†–µ–∂–∏–º –ø–æ–¥—Å–∫–∞–∑–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
            return

        await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å... (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)")

        # –°–æ–±–∏—Ä–∞–µ–º messages –≤ —Ñ–æ—Ä–º–∞—Ç–µ chat
        messages = [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": text}
        ]

        try:
            answer = await llm_ask(messages)
            await message.answer(answer, reply_markup=keyboard)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤ LLM")
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM: {e}", reply_markup=keyboard)
        finally:
            awaiting_llm.pop(user_id, None)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ / –º–µ–Ω—é
    if text == "/start":
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ù–∏–∂–µ ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–∏—Ä–∞–π—Ç–µ üöÄ", reply_markup=keyboard)
        return

    if text == "/menu":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        return

    if text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤.", reply_markup=keyboard)
        return

    if text == "üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç":
        await message.answer("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π.", reply_markup=keyboard)
        return

    if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await message.answer("–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=keyboard)
        return

    if text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        help_text = (
            "–°–ø—Ä–∞–≤–∫
