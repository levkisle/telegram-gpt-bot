import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
import openai
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-3.5-turbo")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

openai.api_key = OPENAI_KEY

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"), KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")],
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
)

# /start –∏ –º–µ–Ω—é
@dp.message()
async def menu_handler(message: types.Message):
    text = message.text

    if text == "/start":
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=keyboard)
    elif text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤.")
    elif text == "üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç":
        await message.answer("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π.")
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await message.answer("–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await message.answer("–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º.")
    elif text == "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞":
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ GPT.")

        # –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ GPT
        @dp.message()
        async def gpt_handler(msg: types.Message):
            try:
                response = openai.ChatCompletion.create(
                    model=OPENAI_MODEL,
                    messages=[{"role": "user", "content": msg.text}]
                )
                answer = response['choices'][0]['message']['content']
                await msg.answer(answer)
            except Exception as e:
                await msg.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT:\n{e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("Bot is starting...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

