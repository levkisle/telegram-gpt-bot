# bot/main.py
import os
import sys
import logging
import asyncio
from typing import Dict

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import openai

# -------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# -------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
logger = logging.getLogger(__name__)

# -------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# -------------------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-3.5-turbo")

if not TELEGRAM_TOKEN:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
    sys.exit(1)

if not OPENAI_KEY:
    logger.warning("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω. –ó–∞–ø—Ä–æ—Å—ã –∫ GPT –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI (sync client used via to_thread)
openai.api_key = OPENAI_KEY

# -------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# -------------------------
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# -------------------------
# –ü—Ä–æ—Å—Ç–∞—è in-memory –ª–æ–≥–∏–∫–∞ —Ä–µ–∂–∏–º–∞ GPT
# (–î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FSM/–ë–î)
# -------------------------
# awaiting_gpt[user_id] = True –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ GPT (–∏ —Ñ–ª–∞–≥ —Å–Ω–∏–º–µ—Ç—Å—è).
awaiting_gpt: Dict[int, bool] = {}

# -------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (ReplyKeyboardMarkup)
# –í aiogram v3 –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π pydantic
# -------------------------
keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"), KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
)

# -------------------------
# –•—ç–Ω–¥–ª–µ—Ä: –≤—Å—ë –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏)
# -------------------------
@dp.message()
async def all_messages_handler(message: types.Message):
    user_id = message.from_user.id
    text = (message.text or "").strip()

    # –ù–æ—Ä–º–∞: –µ—Å–ª–∏ —é–∑–µ—Ä –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è GPT, —Ç–æ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–æ–¥–µ–ª—å
    if awaiting_gpt.get(user_id, False):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª /menu ‚Äî –æ—Ç–º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º
        if text.lower() == "/menu":
            awaiting_gpt.pop(user_id, None)
            await message.answer("–†–µ–∂–∏–º –ø–æ–¥—Å–∫–∞–∑–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
            return

        await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ GPT... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥)")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.to_thread —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop –ø—Ä–∏ sync –≤—ã–∑–æ–≤–µ openai
            def call_openai_sync():
                # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç (openai.ChatCompletion.create) ‚Äî –≤—ã–∑—ã–≤–∞—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                resp = openai.ChatCompletion.create(
                    model=OPENAI_MODEL,
                    messages=[{"role": "user", "content": text}],
                    temperature=0.7,
                )
                return resp

            resp = await asyncio.to_thread(call_openai_sync)

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            answer = ""
            try:
                answer = resp["choices"][0]["message"]["content"]
            except Exception:
                answer = str(resp)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(answer, reply_markup=keyboard)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI")
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT: {e}", reply_markup=keyboard)
        finally:
            # –°–Ω–∏–º–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
            awaiting_gpt.pop(user_id, None)

        return  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

    # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ GPT ‚Äî –æ–±—ã—á–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ –º–µ–Ω—é/–∫–æ–º–∞–Ω–¥–∞–º
    if text == "/start":
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ù–∏–∂–µ ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–∏—Ä–∞–π—Ç–µ üöÄ",
            reply_markup=keyboard
        )
        return

    if text == "/menu":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        return

    # –ú–µ–Ω—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
    if text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        # TODO: —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å–æ—Ü—Å–µ—Ç–µ–π
        await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤.", reply_markup=keyboard)
        return

    if text == "üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç":
        # TODO: –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤, —à–∞–±–ª–æ–Ω—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        await message.answer("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π.", reply_markup=keyboard)
        return

    if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        # TODO: —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—è–∑—ã–∫, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
        await message.answer("–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=keyboard)
        return

    if text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        help_text = (
            "–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º:\n"
            "‚Ä¢ –ö–Ω–æ–ø–∫–∞ ¬´üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞¬ª ‚Äî –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å GPT.\n"
            "‚Ä¢ –í —Ä–µ–∂–∏–º–µ GPT –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –≤–æ–ø—Ä–æ—Å, –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏.\n"
            "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /menu ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
            "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        )
        await message.answer(help_text, reply_markup=keyboard)
        return

    if text == "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞":
        # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è GPT
        awaiting_gpt[user_id] = True
        await message.answer(
            "–†–µ–∂–∏–º –ø–æ–¥—Å–∫–∞–∑–æ–∫ GPT –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n"
            "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /menu.",
            reply_markup=keyboard
        )
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
        reply_markup=keyboard
    )

# -------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -------------------------
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # –£–∫–∞–∑—ã–≤–∞–µ–º bot –≤ polling, —á—Ç–æ–±—ã Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–ª—è–ª–∏—Å—å
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
