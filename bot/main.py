# bot/main.py
import os
import sys
import logging
import asyncio
from typing import Dict, Any

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ù–æ–≤—ã–π OpenAI-–∫–ª–∏–µ–Ω—Ç (openai>=1.0.0)
from openai import OpenAI

# -------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
logger = logging.getLogger(__name__)

# -------------------------
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# -------------------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-3.5-turbo")

if not TELEGRAM_TOKEN:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
    sys.exit(1)

if not OPENAI_KEY:
    logger.warning("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω. –ó–∞–ø—Ä–æ—Å—ã –∫ GPT –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

# -------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI client (v1+)
# -------------------------
client = OpenAI(api_key=OPENAI_KEY) if OPENAI_KEY else None

# -------------------------
# Telegram bot / dispatcher (aiogram v3)
# -------------------------
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –ü—Ä–æ—Å—Ç–∞—è in-memory –ª–æ–≥–∏–∫–∞ —Ä–µ–∂–∏–º–∞ GPT (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ª—É—á—à–µ FSM/–ë–î)
awaiting_gpt: Dict[int, bool] = {}

# -------------------------
# ReplyKeyboardMarkup (aiogram v3: pydantic models use named args)
# -------------------------
keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"), KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
)

# -------------------------
# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏–∑ OpenAI-–æ–±—ä–µ–∫—Ç–∞
# -------------------------
def extract_chat_completion_text(resp: Any) -> str:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ—á—å content –∏–∑ –æ—Ç–≤–µ—Ç–∞ client.chat.completions.create(...)
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.
    """
    try:
        # dict-like
        return resp["choices"][0]["message"]["content"]
    except Exception:
        pass

    try:
        # attribute-like
        choice = getattr(resp, "choices", None)
        if choice:
            first = choice[0]
            msg = getattr(first, "message", None)
            if msg:
                return getattr(msg, "content", str(resp))
    except Exception:
        pass

    # fallback ‚Äî —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    return str(resp)

# -------------------------
# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
# -------------------------
@dp.message()
async def all_messages_handler(message: types.Message):
    user_id = message.from_user.id
    text = (message.text or "").strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ "–ø–æ–¥—Å–∫–∞–∑–æ–∫" ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ GPT
    if awaiting_gpt.get(user_id, False):
        if text.lower() == "/menu":
            awaiting_gpt.pop(user_id, None)
            await message.answer("–†–µ–∂–∏–º –ø–æ–¥—Å–∫–∞–∑–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
            return

        await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ GPT... (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥)")

        if client is None:
            await message.answer("OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω).", reply_markup=keyboard)
            awaiting_gpt.pop(user_id, None)
            return

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–∑–æ–≤ OpenAI client –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
            def call_openai_sync(local_text: str):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Chat Completions –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–ª–∏–µ–Ω—Ç–∞ v1.x
                return client.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=[{"role": "user", "content": local_text}],
                    temperature=0.7,
                )

            resp = await asyncio.to_thread(call_openai_sync, text)
            answer = extract_chat_completion_text(resp)
            await message.answer(answer, reply_markup=keyboard)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI")
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT: {e}", reply_markup=keyboard)
        finally:
            awaiting_gpt.pop(user_id, None)
        return

    # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ GPT ‚Äî –æ–±—ã—á–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
    if text == "/start":
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ù–∏–∂–µ ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–∏—Ä–∞–π—Ç–µ üöÄ", reply_markup=keyboard)
        return

    if text == "/menu":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        return

    if text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        # TODO: –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å–æ—Ü—Å–µ—Ç–µ–π
        await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤.", reply_markup=keyboard)
        return

    if text == "üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç":
        # TODO: –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è/–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤
        await message.answer("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π.", reply_markup=keyboard)
        return

    if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        # TODO: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=keyboard)
        return

    if text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        help_text = (
            "–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º:\n"
            "‚Ä¢ –ö–Ω–æ–ø–∫–∞ ¬´üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞¬ª ‚Äî –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å GPT.\n"
            "‚Ä¢ –í —Ä–µ–∂–∏–º–µ GPT: –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –≤–æ–ø—Ä–æ—Å, –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏.\n"
            "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /menu ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
            "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        )
        await message.answer(help_text, reply_markup=keyboard)
        return

    if text == "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞":
        awaiting_gpt[user_id] = True
        await message.answer(
            "–†–µ–∂–∏–º –ø–æ–¥—Å–∫–∞–∑–æ–∫ GPT –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /menu.",
            reply_markup=keyboard
        )
        return

    # –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
    await message.answer("–Ø –Ω–µ –ø–æ–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ /help.", reply_markup=keyboard)

# -------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -------------------------
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º long polling ‚Äî –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
