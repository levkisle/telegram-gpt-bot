import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import openai
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-3.5-turbo")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

openai.api_key = OPENAI_KEY

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"), KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")],
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
)

# –•—ç–Ω–¥–ª–µ—Ä /start
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=keyboard)

# –•—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–æ–∫
@dp.message_handler(lambda message: message.text in ["üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç",
                                                   "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"])
async def menu_handler(message: types.Message):
    text = message.text
    if text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤.")
    elif text == "üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç":
        await message.answer("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π.")
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await message.answer("–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await message.answer("–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º.")
    elif text == "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞":
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ GPT.")

        # –°—Ç–∞–≤–∏–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT
        @dp.message_handler()
        async def gpt_handler(msg: types.Message):
            response = openai.ChatCompletion.create(
                model=OPENAI_MODEL,
                messages=[{"role": "user", "content": msg.text}]
            )
            answer = response['choices'][0]['message']['content']
            await msg.answer(answer)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("Bot is starting...")
    executor.start_polling(dp, skip_updates=True)

